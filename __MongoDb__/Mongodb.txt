--------------------------------------------day01-----------------------------------------------------|
MongoDB(芒果数据库):
    数据库管理阶段：
        优点：数据组织结构化，降低冗余、提高增删改查效率、方便拓展、方便程序调用，做自动化的处理
        缺点：数据库使用特定的语句操作，相对复杂

    文件管理阶段：
        优点：使用简单方便、数据能够长期保存、可以存储大量数据
        缺点：数据一致性差、数据的查找修改不方便、数据冗余

概念：
    数据：
        能够输入到计算中并被识别处理的信息的集合
    数据结构：
        研究一个数据集合中，数据之间关系的学科
    数据库：
        按照数据结构存储数据的仓库。在数据库管理系统管理下载一定介质上的数据集合。
    数据库管理系统：
        管理数据库的软件，用于建立维护数据库
    数据库系统：
        由数据库和数据库管理系统等开发工具组成的集合

关系型数据库：
    采用关系模型来组织数据结构的数据库(二维表)
    优点：
        容易理解，逻辑类似常见的表格
        使用方便，都使用sql语句，sql语句很成熟
        数据一致性高，冗余低，完整性好
        技术成熟，可以使用外部关联等复杂操作
    缺点：
        每次都需要sql语句的解析，消耗大
        不能很好的满足并发需求，特别是海量数据爆发，读写能力不足
        关系型数据库每一步操作都需要加锁，以保证的原子性，增加了数据库负担
        数据的一致性有时会导致空间浪费

非关系型数据库(Nosql-----> not only sql):
    优点：
        高并发、读写能力强
        普遍比关系型数据库容易扩展
        弱化了数据结构，降低数据一致性
    缺点：
        通用性差，没有sql语句一样的一致化操作
        操作过于冗长，容易混乱
        没有join等复杂操作，很多也不支持事务操作等
Nosql 使用情况：
    1.对数据一致性要求低
    2.数据库需要处理海量并发
    3.需要处理速度较快，比如做一个临时的中间过度存储器
    4.数据库构建比较方便的构建非关系模型

Nosql分类：
    键值型数据库：Redis
    列存储数据库
    文档型数据库：MongoDB
    图形数据库

MongoDB数据库：(非关系型数据库--文档型数据库)
    1.由c++编写的数据库管理系统
    2.支持丰富的增删改查操作，
    3.支持丰富的数据类型
    4.支持众多的编程语言接口(python PHP C++ C#)
    5.使用方便，便于部署。相对成熟的非关系数据库

MongoDB安装：
自动安装
sudo apt-get install MongoDB
默认安装位置：/var/lib/MongoDB
配置文件：/etc/MongoDB.conf
命令集：/usr/bin/ & /usr/local/bin(软件安装后提供的功能性的命令)

手动安装：
1.下载mongodb(www.mongodb.com)
2.选择想要下载的版本
3.选择合适的位置解压(tar解压后得到MongoDB文件夹)
  将命令集解压后文件夹中bin目录，添加到环境变量
PATH=$PATH:/文件目录
export PATH
将以上两句添加到/etc/rc.local
4.重启系统

Mogodb命令：
设置数据库存储位置：
    mongod --dbpath 目录
设置数据库端口：
    mongod --port 8080
    *默认端口 27017

mongo  
进入mongo shell界面：mongodb的交互界面，操作数据库

退出界面：
quit()
ctrl+c
exit

mongodb数据库组成形式：
    键值对   ---->    文档  -----> 集合  ---->数据库
---------------------------------------------------
   ID    |       NAME        |          AGE       |
---------------------------------------------------
   01    |       lucy        |          17        |
---------------------------------------------------
{
    '_id':1,
    'NAME':'Lily',
    'AGE':'17'
},
{
    '略' 
}

mysql和MongoDB概念对比

mysql        mongodb         含义

database     database       数据库

table        collection     表/集合

column       field          字段/域

row          document       记录/文档

index        index          索引

创建数据库：
    use (databaseName)
e.g.  use stu   创建一个stu数据库

    *use 实际上是表示选择某个数据库使用。当这个数据库不存在时会自动创建

    *使用use后数据库不会被马上被创建，而是在实际写入数据时才会创建

查看当前系统中的数据库
    show dbs
系统数据库：
    admin:存放用户及权限
    local:存储本地数据
    config:存储分片信息

数据库的命名规则：
    1.使用UTF-8字符
    2.不能有空格./\等特殊字符
    3.长度不能超过64字节
    4.不和系统数据库重名


db：mongodb系统全局变量，代表当前正在使用的数据库
    *如果没有use任何数据库情况下，db表示test。此时插入数据则创建test数据库

数据库的备份和恢复：
    备份：mongodump -h dbhost -d dbname -o dbdir
            命令     主机     数据库名    目录
e.g.   mongodump -h 127.0.0.1 -d stu -o student
将stu数据库备份到student目录中

    恢复：mongorestore -h dbhost:port -d dbname  path
              命令      主机     数 据 库 名     目录
e.g.   mongorestore -h 127.0.0.1:27017  -d student student/stu


数据库的监测：
    mongostat

insert      query      update        delete:每秒执行增删改查的次数

command:每秒运行命令次数

flushes:每秒清理缓存次数

vsize：使用的虚拟内存

res:物理内存

mongotop
    监测每个数据库的读写时长

ns             total                read              write
数据集合       总时长              读时长             写时长

删除数据库：
    db.dropDatabase()
删除db代表的数据库

创建集合：
    db.createCollection(collection_name)
    e.g.  db.createCollection('class1')

创建集合2：
    
    当向一个集合中插入数据的时候，如果这个集合不存在则会自动创建
    db.collecionName.insert(....)
    db.class2.insert({'name':'Tom','age':17,'sex':'M'})

查看数据库中的集合：
    show collections
    show tables

集合命名规则：
    1.utf-8 字符
    2.不能有'\0'
    3.不要以system.开头，因为这是系统保留集合前缀
    4.不要和关键字重复
删除集合：
    db.collectionName.drop()
    db.class2.drop()    #删除class2集合

集合的重命名：
    db.collectionName.renameCollection('newname')
    db.class2.renameCollection('class0')   #将class2重命名为class0

文档:
    mongodb中数据的组织形式--->文档
    
    mongodb文档：
        以键值对形式组成的类似字典的数据描述形式。
        键：即文档的域
        键的命名规则：
            1.需要是utf-8字符串
            2.不使用'/0'
            3.通常不用 . $
            4.一个文档的键不能重复
            *文档中的键值对是有序的
            *mongodb中的数据严格区分大小写
        值：
            即文档存储的数据   支持bson数据
            JavaScript------>json----->bson
            支持的类型：
                整形 浮点型 布尔型 Array数组 Timestamp(时间戳) Date(事件日期)  Object(内部文档) None(空值  null) 
                String(字符串)   Symbol(特殊字符串)   Binary data(二进制字串)  code(代码)  regex(正则表达式)
                ObjectId(ObjectId字串)
ObjectId
    _id:当在mongodb中插入文档时，如果不指定_id则会自动添加这个域，作为主键
    ObjectId()值是系统自动生成的不重复字串标识
    24位  8位(文档创建事件)  后六位(机器ID)   后四位(进程ID)    最后六位(计数器)

集合中的文档：
    1.集合中的文档不一定有相同的域
    2.集合中的文档域的多少不一定相同
    3.集合中文档，值的类型不一定相同

集合设计：
    1.集合中的文档尽可能描述同一类数据
    2.同一类数据不要过度分散在多个集合中存放
    3.集合中文档的结构层次不宜过多

插入文档：
    db.collectionName.insert()
    插入单个文档
    db.class0.insert({内容})
    *插入数据时域名可以不加引号
    *查看插入结果db.class.find()
    *_id为系统自动添加的主键，如果自己写_id则为自己设定的值，但是任然不可重复
    *一个集合中的文档是有序的

插入多个文档：
    db.collectionName.insert([{},{},{}])

save() 插入文档
    db.collectionName.save()
*如果不加_id域时用法同insert()
*如果加_id，此_id值存在则save表示修改该文档

作业：
1.关系型数据库和非关系型数据库区别
2.复习mysql 增删改查
3.练习mongo数据库集合创建删除，文档插入命令

--------------------------------------------day02-----------------------------------------------------|
获取集合对象：
    db.getCollection('class1')   == db.class1
    e.g.  db.getCollection('class1').insert({name:''......略})

查找：
    mongo:db.collection.find(query,field)
查找所有内容：
    db.collection.find()    ----->相当于select * from table
    find(query,filed)
    功能：
        查找数据
    参数：
        query：筛选条件，相当于where语句
        field：选定要展示的域
    返回值：
        返回查找到的文档
    query：以键值对的形式给出筛选条件
field：以键值对的形式给出要展示(不展示)的域，域名为键，值为1表示展示，0表示不展示
    e.g.    
        db.class.find({name:'Lily'},{_id:0,sex:0})
    { "name" : "Lily", "age" : 18 }
*如果某个域设置为0贼表示不展示该域其他的均展示
*如果某个域设置为1则表示展示该域其他的均不展示
*_id必须设置为0才不会展示
*除了_id 其余设置的值必须相同

findOne(query,field)
功能：
    只查找第一条符合条件的文档
参数：
    参数返回值同find()

query  更多筛选功能
操作符：
    使用$符号标注的一个有特殊意义的字符串。用以表达一定的含义。比如$lt 表示小于

比较操作符：
    $eq   等于
    例：db.class.find({age:{$eq:13...}})
    $lt   小于
    $lte  小于等于
    $gt   大于
    $ne   不等于
    $in   包含
    $nin  不包含
*如果某个文档不存在查找的域，则不等于可以匹配到该文档

逻辑操作符：
    query 逗号分隔的条件即为与关系
    e.g. 年龄大于13小于16
         db.class.find({age:{$gt:13,$lt:16}},{_id:0})

$and    逻辑与
db.class.find($and:[{age:{$gt:13,$lt:16}]},{_id:0})

$or     逻辑或
db.class.find($or:[{age:{$gt:13,$lt:16}]},{_id:0})

$nir   既不也不

条件混合：
    年龄大于16并且为男生 或者 年龄小于14
    db.class.find($or:[{age:{$gt:16},sex:'m'},{age:{$lt:14}}]},{_id:0})
    年龄大于16或者为女生 并且 姓名大于 Jame

数组查找：
    查看数据中是否包含某一项
    db.class.find({score:67},{_id:0})
$all 
    db.class.find({score:{$all:[64,75]}},{_id:0})
    同时包含64和75的数据
$size
    通过数组元素个数查找
    db.class.find({score:{$size:3}},{_id:0})
$slice
    取出数组的部分进行显示  放在field中
    db.class.find({},{_id:0,score:{$slice:2}})

其他查找方法：
    $exists
        判断一个域是否存在
        e.g. 查找存在age域的文档
        db.class1.find({age:{$exists:true}},{_id:0})
        *true表示有这个与 false则相反
    $mod
        余数查找
        e.g. 查找除以2余数为1的
        db.class.find({age:{$mod:[2,1]}},{_id:0})
    $type
        找出值为指定类型的文档
        e.g. db.class.find({age:{$type:1}},{_id:0})

查找结果相关函数：
功能：
    查看集合某个域的取值范围
    db.class.distinct('age')
    e.g. 查看集合中age域值得范围
    db.class.distinct('age')
pretty()
    功能：
        格式化显示查找结果
        db.class.find().pretty()
limit(n)
功能：
    显示查找结果的前n条
    e.g. db.class.find({},{_id:0}).limit(3)

skip(n)
功能：
    跳过前n条显示
e.g. db.class.find({},{_id:0}).skip()

count()
功能：
    计数统计
e.g. db.class.find({sex:'m'},{_id:0})

sort()
功能：
    对查找结果排序
参数：
    以键值对的形式给出
    1表示按照升序排序,-1表示降序排序
e.g. db.class.find({},{_id:0}).sort({age:1})

复合排序：
    当第一排序项相同比较第二排序项
    e.g. 
    db.class.find({},{_id:0}).sort({age:1,name:1})

函数的连续调用：
    当函数返回文档集合时还可以继续调用函数
e.g. 查找班级年龄最大的三个
db.class.find({},{_id:0}).limit(3).sort({age:-1})


文档的删除操作：
    db.collection.remove(query,justOne)
功能：
    删除文档
参数：
    query 筛选要删除的文档 相当于where用法同查找
    justOne:布尔值，默认为false 表示删除所有。如果设置为true只删除第一条符合条件的文档
    db.class.remove({name:'阿蓉'})


练习：
    1.创建数据库  名字 grade
    2.数据库中创建集合 class
    3.集合中插入文档,格式如下
    {name:'zhang',age:10,sex:'m',hobby:['a','b']}
    age范围  4-15
    hobby 范围[draw dance sing pingpong basketball football running computer]
    4.查找练习：
        查看班级所有人信息
        查看班级年龄8岁的同学信息
        查看年龄大于10岁的学生信息
        查看年龄在8-11岁之间的学生信息
        查看年龄为9岁且为男生的学生
        找到年龄小于7岁或大于12岁的学生
        找到有两项兴趣爱好的学生
        找到兴趣中有draw的学生
        找喜欢draw或者dance的学生
        统计兴趣有三项的学生人数
        找到本班年龄第二大的学生
        查看兴趣的范围
        找到年龄最小的三个学生
        5.删除所有年龄大于12或者小于7岁的学生

修改操作：
    db.collection.update(query,update,upsert,multi)
功能：
    修改文档
参数：
    query:筛选需要修改的文档，相当于where
    用法同查找
    update:要修改什么内容 相当于set。往往需要配合修改操作符
    upsert:bool值 默认false如果query的文档不存在则不做操作
    设置为true则如果文档不存在根据query和update内容插入新文档
    multi:bool 默认false如果筛选到多条文档则只修改第一条
    设置为true则表示修改所有筛选到的文档
作业：
    1.操作一遍增删改查已经解除的操作符
    2.学习一下魔法方法__call__
    3.网络程序 
--------------------------------------------day03-----------------------------------------------------|
修改操作符：

    $set
    修改一个域的值，或者增加一个域
    db.class.update({name:'Jame'},{$set:{sex:''}})

    $unset
    删除一个域
    db.class.update({name:'Jame'},{$unset:{sex:''}})

    $rename
    修改一个域的名称
    db.class.update({},{$rename:{sex:'gender'}},false,true)

    $setOnInsert
    如果update执行了插入文档操作，表示补充插入内容
    db.class.update({name:'Tom'},{$set:{age;17},$setOnInsert;{gender:'m',tel:'10086'}},True)
    *在update参数中可以同时写多个修改器

    $inc 
    加减修改器
    db.class.update({},{$inc:{age:1}},false,true)
    所有人年龄加1
    *$inc值可以是正数负数整数小数

    $mul
    乘法修改器
    db.class.update({name:'Tom'},{$mul:{age:2}})
    *$mul值可以是正数负数整数小数

    $max
    指定了某个域值得下限，如果小于指定值则修改为指定值
    db.class.update({},{$max{age:20}},flase,true)

    $min
    制定了某个域的上限，如果大于指定值则修改为指定值
    db.class.update({},{$max{age:20}},flase,true)

数组修改器：
    $push 向数组中添加一项
    db.class.update({name:'小明'},{$push:{score:5}})

    $pushAll  向数组中添加多项
    db.class.update({name:'小红'},{$pushAll:{score:[5,10]}})

    $pull  向数组中删除一项
    db.class.update({name:'小红'},{$pull:{score:5}})
    *数组可以有重复值，如果删除则会把所有指定的值都删除

    $pullAll  删除数组中的多项
    db.class.update({name:'小红'},{$pullAll:{score:[67,5]}})

    $each   对多个值逐一操作
    db.class.update({name:'小明'},{$push:{score:{$each:[5,10]}}})

    $position    指定插入位置
    db.class.update({name:'小红'},{$push:{score:{$each:[10],$position:1}}})
    *需要搭配$each使用，将数据从1号位置插入

    $sort 对数组进行排序
    db.class.update({name:'小红'},{$push:{score:{$each:[],$sort:1}}})

    $pop   弹出一项
    db.class.update({name:'小红'},{$pop:{score:1}})

    $addToSet   向数组中添加一项，不能和已有的内容重复

时间数据类型：
    mongodb中存储时间格式:ISODate()
    方法1：new Date() 自动生成当前时间

    db.class.insert({title:'Python入门',date:newDate()})
    方法2：ISODate()   生成当前时间

    Date()   将生成的当前时间变成字符串存储


    ISODate()
    功能：生成时间类型存储
    参数：参数指定时间
    '2018-7-1   12:10:56'
    '20180701   12:10:56'
    '20180701'

    时间戳
    valueOf()
    将时间转换为时间戳

    Null -----> null
    1.如果某个域存在却没有值，可以设置为null
    2.如果某个域不存在，则使用null匹配

    内部文档类型：
        Object  内部文档
            文档内某个域还是一个文档，则这个文档为内部文档
            db.class4.insert({'Book1':{title:'python爬虫',price:36.8,author:'zhangsan'}})
            db.class4.insert({'Book2':{title:'python Web',price:40,author:'lisi'}})
            db.class4.find({Book2.title}:'python Web',{_id:0})
            *当需要使用内部文档某个域的时候，可以使用外部文档.的方法引用内部文档，但是此时
            需要加引号
            db.class4.update({'Book1.title':'python爬虫'},{$set:{'Book1.price':48.8}})

    数组的下标引用：
        *使用数组时，可以使用数组域，数组序列下标的方式引用数组的具体某一项
        db.class3.update({name:'小明'},{$set:{'score.0':100}})

    查找结果的有序性：
        即可以对find的查找结果使用[]的方式引用具体某一条
        db.class1.find({},'age':16,'sex':'m')[1]
    练习：
        使用之前的grade数据库
        1.将小红年龄修改为8岁，兴趣爱好变为跳舞画画
        2.追加小明兴趣爱好  唱歌
        3.追加小王兴趣爱好，吹牛，打篮球
        4.小李兴趣多了跑步唱歌，但是要确保和之前的不重复
        5.班级所有人年龄加1
        6.删除小明的sex属性
        7.删除小李的第一个爱好
        8.删除小红的兴趣画画和唱歌

索引：
    指建立指定键值对即所在文档中存储位置的对照清单，使用索引可以方便我们快速查找，减少遍历次数，
    提高查找效率

ensureIndex()
功能：创建索引
参数：索引域，索引类别和选项
db.class.ensureIndex({name:1})

查看一个集合中的索引：
    db.class.getIndexes()
    *_id是系统自动创建的索引

自定义索引名称：
    db.class1.ensureIndex({name:1},{name:'name_index'})

删除索引：
    dropIndex()
    功能：删除索引
    参数：要删除的索引，可以是索引名称或者索引键值对
    db.class.dropIndex('age_Index')

    dropIndexes()
    功能：删除所有索引

索引类型：
    数组和子文档索引
    如果对某个域创建索引，值为数组或者子文档，则通过数组或子文档进行查找时也是索引查找

覆盖索引：
    查找返回的内容，仅仅是索引表存储的内容，不需要再去源数据库查找

唯一索引：
    创建索引时希望集合中创建索引的域的值均不重复
    *创建唯一索引的域的值不可以重复

稀疏索引：
    只针对有指定域的文档创建索引表，如果某个文档没有该域则不做索引处理
    db.class.ensureIndex({age:1},{sparse:true})

索引约束：
    1.当数据发生更新，索引也要随之更新，影响插入，修改，删除操作的效率
    2.索引表也需要占用一定的磁盘空间
    综上：
        当数据量比较小，或者需要频繁的进行数据修改操作而不是查找操作的时候，不适合创建索引
聚合操作：
    对文档的更高级的筛选整理统计
    db.collection.aggregate()
    功能：聚合函数，完成聚合操作
    参数：聚合条件

聚合操作符：
$group   分组聚合  需要配合分组统计操作符使用
         按sex内容分组


$sum      统计求和

db.class.aggregate({$group:{_id:'$sex',num:{$sum:'$age'}}})


$avg   求平均
db.class.aggregate({$group:{_id:'$sex',num:{$avg:'$age'}}})

$max  求最大值
db.class.aggregate({$group:{_id:'$sex',max:{$max:'$age'}}})

$max  求最大值
db.class.aggregate({$group:{_id:'$sex',min:{$min:'$age'}}})

$project   用于修改文档的显示效果
db.class.aggregate({$project:{_id:0,sex:0}})

$match  过滤数据
db.class.aggregate({$match:{age:{$gt:16}}})

--------------------------------------------day04-----------------------------------------------------|
聚合操作：

$limit  显示前几条文档
e.g. 获取数据的前两个文档
db.class.aggregate({limit:2})

$skip   跳过显示数据
db.class.aggregate({$skip:2})
跳过前两条数据，显示后面所有数据

$sort  排序
db.class.aggregate({$sort:{$age:1}})

聚合管道：
    将前一个聚合操作得到的结果给后一个聚合操作继续使用
    db.collection.aggregate([聚合1,聚合2.....])
练习：
    增加一个分数域 score:{chinese:88,math:76,english:76}
    1.学生按照性别分组，统计每组人数
    db.class.aggregate({$group:{_id:'$sex',num:{$sun:1}}})
    2.统计每名男生的语文分数
    db.class.aggregate([{$match:{sex:'m'}},{$project:{_id:0,name:1,'score.chinese:1'}}])
    3.将所有女生按照英语成绩降序排序
    db.class.aggregate([{$match:{sex:'w'}},{$sort:{'score.english':-1}}])

固定集合：
    mongodb中可以创建大小固定的集合，称之为固定集合
    特点：插入速度快，顺序查找速度快
    能够淘汰早期数据
    可以控制集合大小
    适用：临时缓存
          日志处理。。
db.createCollection(collection,{capped:true,size:10000,max:1000})

capped:true    表示创建固定集合
size:          固定集合的大小(bytes 最小是4096字节)
max:           表示最多存放多少文档

e.g.   db.createCollection('log',{capped:true,size:10,max:3})

文件存储：

    1.存储路径
        将文件在本地的路径以字符串形式存储到数据库
        优点：节省数据库空间
        缺点：当数据库或者文件位置发生变化时文件丢失

    2.二进制存储
        以二进制方式将文件存储到数据库
        优点：数据库和文件绑定存在
        缺点：占用空间大，结构化麻烦

mongodb存储二进制文件：
    GridFS方法存储大文件(大于16m的为大文件)
        ·GridFS方案解释：
            1.在mongodb中一个数据库创建两个集合共同完成对文件的存储
            2.fs.files 用来存储文件的相关信息，为每一个文件创建一个文档(文件名，文件类型等信息)
            3.fs.chunks 用来分块存储文件的实际内容
    如何存储：
        mongofiles -d dbname put file
        *如果数据库不存在则自动创建
    或
    将文件转换为二进制，进行插入
    *对于同一个文件fs.files中的_id值等于fs.chunks中的files_id值
    { "_id" : ObjectId("5b569c1169d72e1075687ee5"), "files_id" : 
    ObjectId("5b569c1169d72e1075687ed1"), "n" : 19, "data" : 

文件提取：
mongofiles -d dbname get file
优点：存储方便，提供更好的命令支持
缺点：读写效率低

游标：
    通过一定的操作获取返回结果的对象
var cursor = db.class.find()
cursor.hasNext()   判断是否有下一条数据
cursor.next()    获取下一条数据

操作步骤：
    1.创建mongodb数据库连接对象
    conn = pymongo.MongoClient('主机地址','端口号')
    2.得到数据库对象
    db = conn.库名
    3.获取集合对象
    myset = db.集合名
    4.增删改查操作 索引 聚合
    调用各种myset的属性函数
    5.关闭数据库连接
    conn.close()

插入操作:
    insert()
    insert_many()
    insert_one()
    save()

查找操作：
    find()  返回一个结果游标
    *在python中使用操作符的方法与mongo shell中相同，只需要转变为字符串格式
    加上引号即可

cursor  的属性函数
next()
limit()
skip()
count()

find_one()
返回一个字典

更新操作：
    update(query,updata,upsert=False,multi=False)
    update_many()
    update_one()

删除操作：
    remove(query,multi = True)
    multi默认为True表示删除所有筛选内容
    如果设置为False则表示删除一条

复合功能函数
find_one_and_delete()

索引操作：
    ensure_index()   创建索引
    list_indexes()   查看索引
    drop_index()     删除所有
    drop_indexes()   删除所有索引

聚合操作：
    aggregate([])
    参数写法和mongo shell 中聚合相同
    返回值：返回一个迭代游标  同find()

GridFS  程序提取

import gridfs
gridfs.GridFS(db)

插入二进制格式数据：
    import bson.binary
    

