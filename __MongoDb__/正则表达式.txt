正则表达式
	动机：
		1.文本处理已经成为计算机常见工作之一
		2.对文本内容的搜索，定位，提取是逻辑比较复杂的工作
		3.为了快速的解决上述问题，产生正则表达式技术
	定义：即文本的高级匹配模式，提供搜索，替代，查找等功能。本质是由一系列特殊符号和字符组成的字串。
	目标：
		1.熟练掌握正则表达式符号
		2.能够看懂或者简单编写基本的正则表达式
		3.能够使用python操作正则表达式
	特点：
		方便进行检索修改文本的操作
		支持编程语言众多
		使用灵活多样

 python   ----> re模块 处理表达式模块

re.findall(pattern,string)
功能：使用正则表达式匹配字符串
参数：pattern    正则表达式字符串
      string     目标字符串
返回值：
	返回匹配到的所有内容

用法(import re
s = 'my email is Levi@126.com or lvze@tedu.cn'
re.findall('\w+@\w+\.\w{2,3}',s))

元字符(正则表达式中有一定含义的符号)：
	1.普通字符
	匹配规则：
		匹配字符本身
	re.findall('abc','abcabcsdhuisfhdhfiohasohjposfhd')
	
	2.或
	元字符：|
	匹配规则：匹配|两边任意一个正则表达式
	re.findall('ab|cd','abdsaacdfaabvf')
	*|左右不要加没用的空格

	3.匹配单一字符
	元字符：.
	匹配规则:匹配除\n外任意一个字符
	re.findall('f.o','faofcof@of%o')

	4.匹配开始位置
	元字符：^
	匹配规则：匹配一个字符串的开始位置

	5.匹配结尾位置
	元字符:$
	匹配规则：匹配字符字符串的结束位置

	6.匹配重复：
	元字符：*
	匹配规则：匹配前面的正则表达式重复0次或多次
	re.findall('fo*','fco,fooooo,foooooooooo,fooooooooo,fooooooofofoofoofofofofoof0')

	7.匹配重复：
	元字符：+
	匹配规则：匹配前面的正则表达式1次或多次
	re.findall('ab+','abbbbbbbsdbsbdbfduhichudfighasodhfgiasjpod jicboasnfuiasb fiahcribraHH8C7VWIEBODOICARHFA')

	8.匹配重复：
	元字符：?
	匹配规则：匹配前面出现的元字符0次或1次
	re.findall('ab?','aababcabcdbcadbacd')

	9.匹配重复
	元字符：{n}
	匹配规则：匹配前面的正则表达式n次
	ab{3} -----> abbb
	re.findall('ab{3}','abbbsdsderete')

	10.匹配重复
	元字符：{m,n}
	匹配规则：匹配前面的正则表达式m-n次
	ab{3,5}----->abbb abbbb abbbbbb

	11.匹配字符集合
	元字符：[字符集]
	匹配规则：匹配括号内任意一个字符
	[abc123d]   a b c 1 2 3 d
	[a-z] [A-Z] [0-9]
	[123a-z]

	12.匹配字符集合
	元字符：[^.....]
	匹配规则：除了字符集中的任意一个字符
	[^abc] ----> d e f....
	re.findall('[^abcdef]','a little boy')

	13.匹配任意(非)数字字符
	元字符： \d \D
	匹配规则：\d匹配任意数字字符
	          \D匹配任意非数字字符

	14.匹配(非)普通字符   (数字，字母，下划线)
	元字符：\w    \W
	匹配规则：\w   匹配任意一个普通字符[_0-9a-zA-Z]
	          \W   匹配任意一个非普通字符[^_0-9a-zA-Z]

	15.匹配(非)空字符(空格,\r\t\n\0)
	元字符： \s \S
	匹配规则：\s 匹配任意空字符
	          \S 非空字符
	          re.findall('\s','hello wor\tl\nd')

	16.匹配起止位置
	元字符：\A \Z
	匹配规则：匹配字符串的开始和结束位置
	re.findall('\Ahello wolrd\Z','hello world nihao')
	re.findall('\Ahello wolrd\Z','hello world')
	绝对匹配：正则表达式前后加^$或\A\Z 表示正则表达式需要匹配目标字符串的全部内容

    17.匹配(非)单词边界(普通字符和其他字符交界的位置为单词边界)
    元字符：\b \B
    匹配规则：\b 匹配单词边界
              \B 匹配非单词边界
              re.findall(r'\bis\b','This is Tom')
              re.findall(r'\Bis','This is Tom')

元字符总结：
匹配单个字符：a . \d \D \w \W \s \S [...] [^...]
匹配重复性：* + ? {n} {m,n}
匹配位置：^ $ \A \Z \b \B
其他：| () \

正则表达式转义：
	特殊符号：
		. * ? $ [] () ^ {} \(转义)
	re.findall('ok\?','Are you ok?')---错误
	re.findall('ok\\?','Are you ok?')---正确

r ------raw 字符串  原生字符串，字符串的内容就是字符串本身，不进行任何转义处理

贪婪和非贪婪：
	贪婪模式：正则表达式的重复默认总是尽可能多的向后匹配内容
	* + ? {m,n}

贪婪---->非贪婪  *? +? ?? {m,n}?

    非贪婪模式：尽可能少的匹配内容
    re.findall(r'ab+?','abbbcdsdsd')
正则表达式分组：
	可以使用()为一个正则表达式建立子组，子组可以看做正则表达式的一个局部整体
子组的作用：
	1.子组作为局部整体可以改变某些元字符的行为，比如重复，或等
	re.search(r'.+(\.com|.cn)','abc@123.cn').group()
	2.子组在某些操作中可以单独提取匹配内容

子组的注意事项：
	*一个正则表达式中可以有多个子组，正则表达式依然是通过整体匹配内容
	*子组由外到内，由左到右为第一第二第三.....子组
	((ab)cd(ef)g)
	*子组内容不会重叠

捕获组和非捕获组(命名组，非命名组)：
	格式：(?P<name>pattern)
	命名的作用：
	1.很多编程接口可以通过名称获取指定组的内容
	2.命名组可以被重复调用
		格式:(?P=name)  name表示自己命名的名字
		re.search(r'(?P<dog>ab)cd(?P=dog)','abcdab').group()
	正则表达式设计原则：
		1.正确性，能够正确的匹配要求内容
		2.唯一性，除了需要匹配的内容，尽可能不匹配不需要的内容
		3.全面性，对目标特征考虑全面不遗漏
re模块：
	compile
		regex = re.compile(pattern,flags=0)
			功能：生成正则表达式对象
			参数：pattern 正则表达式
				  flags 功能标志位，丰富正则的匹配功能
			返回值：返回正则表达式对象
	findall
		list = re.findall(pattern,string,flags)
			功能：根据正则表达式匹配目标字符串
			参数：pattern 正则表达式
			      string  目标字符串
			返回：返回一个列表，内部为匹配到的内容
			*如果正则表达式有分组则只显示子组内容
		list= =regex.findall(string,pos=0,endpos=999)
		功能：根据正则表达式匹配目标字符串
		参数：string 目标字符串
		      pos 标明从目标字符串的哪个位置开始匹配
		      endpos 标明匹配到目标字符串的哪里
		返回：返回一个列表，内容为匹配到的内容
	
	split
		re.split(pattern,string,flags=0)
			功能：通过正则表达式分隔字符串
			参数：pattern  正则表达式
			      string   目标字符串
			返回值：分隔后的字符串列表
	sub
	re.sub(pattern,replaceStr,string,max,flags)
	功能：替换正则表则表达式匹配到的内容
	参数：pattern 正则表达式
	      replaceStr   要替换的内容
	      string    目标字符串
	      max    最多替换几处
	返回值：返回替换后的字符串和实际替换了几处
	s =re.sub(r'\s+','##','hello wolrd nihao China') 或s =re.sub(r'\s+','##','hello wolrd nihao China',2) 

	finditer
		re.finditer(pattern,string,flags)
		功能：使用正则表达式匹配目标字符串
		参数：pattern 正则
		      string    目标字符串
		返回值：将匹配内容生成迭代器

	fullmatch:
		re.fullmatch(pattern,string,flags)
		功能：完全匹配某个目标字符串
		参数：pattern   正则
		      string    目标字符串
		返回值：匹配到的内容

	match:
		re.fullmatch(pattern,string,flags)
		功能：匹配某个目标字符串开头
		参数：pattern   正则
		      string    目标字符串
		返回值：匹配到的内容

	search
		obj = re.search(pattern,string,flags)
		功能：匹配目标字符串，只匹配第一处
		参数：pattern 正则表达式
		      string  目标字符串
		返回值：匹配到的内容
		*生成match对象如果失败会返回None，则无法调用match对象属性，此时会产生异常

	pattern   正则对象对应的正则表达式
	flags     获取标志位值
	groupindex:获取组形成的字典，组名为键，第几组为值
	group：     多少子组

    end
    endpos
    re
    string
    lastgroup
    lastindex
    属性方法：
    	start()
		end()
		span()
		group(n = 0)
			功能：获取match对象匹配到的内容
			参数：默认为获取正则整体匹配到的内容
			如果赋值1,2,3......表示获取某个子组匹配到内容
			返回值：返回匹配内容
		groups()
		功能：将所有子组匹配内容形成一个元组

		groupdict()
		功能：将所有捕获组形成字典，组名为键，匹配内容为值 

		flags 参数：
		compile re.findall re.search re.match re.finditer re.fullmatch re.sub re.subn
		re.split
		作用：辅助正则表达式，丰富匹配结果

I ==IGNORECASE    忽略大小写
S ==DOTALL    元字符.匹配   \n
M==MULTILINE   元字符^ $ 可以匹配每行的开头结尾
	s = '''hello world
	nihao China'''
	regex = re.compile(r'^nihao',re.M)
	l = regex.findall(s)
	print(l)
X == VERBOSE     可以给正则表达式添加注释
	pattern = '''(?P<dog>H\w+) #dog组
	\s+  #任意多个空字符
	(world) #匹配world'''
	obj = re.match(pattern,'Hello world',re.X)
	print(obj.group())
-------------------------------------------------------------------------------------------------------------------------
项目注意事项：
	1.什么是项目
	2.重要文档说明
	3.软件工具推荐
	4.电子词典布置

协程应用：
pdb调试方法

完成httpserver第三版
httpserver模块的使用
-------------------------------------------------------------------------------------------------------------------------
什么是项目：
	软件项目：实现一定完整性功能的代码
	软件项目的一般开发流程：
		需求分析 ----->   概要设计 -----> 项目计划 -----> 详细设计 ----->编码测试------>项目测试
		----->调试修改------->项目发布------>后期维护
	
	需求分析：
		确定用户的真实需求
		1.确定用户真实意图，项目基本功能
		2.项目的难度，可行性分析
		3.建立需求分析文档，客户进行确认

	概要设计：
		对项目进行整体分析，初步设计，确认技术方向
		1.确定项目整体架构
		2.确定项目模块化功能
		3.确定项目使用技术
		4.编写项目开发流程图和概要设计文档

	项目计划：
		确定项目的开发流程分工和时间周期
		1.确定开发的先后顺序
		2.确定开发的时间轴和事件里程碑
		3.合理的人员分工
		4.形成甘特图和开发思维导图

	详细设计：
		项目的具体开发设计，完成设计手册
		1.根据开发内容形成详细设计文档
			思路 逻辑流程 功能说明 技术点说明 数据结构说明 代码说明 环境和约束
		
		编码测试：
			按照预定计算实现代码编写，并且做基本监测
			1.写代码
			2.写代码测试
			3.技术攻关
			4.提交代码，代码整合

		项目测试：
			对项目整体功能进行测试
			1.跨平台测试 黑盒白盒 重复 功能性
			2.测试报告
			3.修改代码，完善功能

		项目发布：
			1.将项目提交给用户，进行发布使用
			2.编写使用说明文档
		
		注意事项：
			1.按时完成项目是首要工作
			2.项目实施人员之间的冲突解决
			3.无计划实施必然带来更大的效率低下

常见的项目工具：
	编写文档    word ppt excel markdown LaTex
	项目流程图  Mindmanager Xmind visio
	项目管理：project
	代码管理：git Svn
	编译工具：pycharm Webstream eclipes Anaconda Atom
-------------------------------------------------------------------------------------------------------------------------
电子词典：
	功能说明：
		1.用户可以登录注册
		(登录凭借用户名和密码 注册要求用户名和密码 且用户名不能重复)
		2.用户信息需要长期保存，保证退出后下次仍然可用
		3.能够满足多个用户同时登录操作的情况
		4.功能分为客户端和服务端，客户端主要发起请求，进入客户端后即产生第一级界面
		  第一级界面有：登录 注册 退出
		5.登录成功后进入二级界面
		查词 查看历史记录 退出
		查词：输入单词查看意思，可以循环输入
			单词本：每个单词一行
			        单词和解释之间有空格
			        单词顺序排列
			        * 文本操作   *将单词放入数据库
			查看历史记录：查看用户查词情况
			name word time
		退出：退出到一级界面  相当于注销
项目分析：
	模块：
		socket pymysql/pymongo os multiprocessing threading
	服务器功能：登录 注册 查词 历史记录
	客户端：打印界面 提出请求 接收反馈 打印结果
	技术点：并发 数据库操作 决定套接字使用
	1.确定技术点(什么并发和套接字和数据库)
	2.建立数据表(建立几个表，表之间关系，表的字段，字段的类型)
	3.搭建框架，实现通信功能
	4.尝试实现具体功能
-------------------------------------------------------------------------------------------------------------------------

服务器：
	main()   : 创建套接字 ---》 父子进程 ---》子进程等待客户端请求recv ---》 父进程等待其他客户端链接
	child() : 接受请求 分析请求类型 根据请求调用功能函数 quit()
	login() : 操作数据库比对用户密码 回复结果
	register() ： 插入数据库 
	query() ： 查询数据库将结果给客户端  插入历史记录
	history() ： 查询数据库 将结果给客户端


客户端：
	main（） ： 创建套接字 发送链接请求 ---》一级界面  
	input ---》发送请求
login（） 登录   ---》进入二级界面
register（） 注册
query（） 发送请求 接受反馈  打印

history（） 发送请求 接受反馈  打印
-------------------------------------------------------------------------------------------------------------------------
协程：
	定义：纤程，微线程
	功能特点：通过应用层程序，记录上下文栈区，实现在程序执行过程中的跳跃执行。由此可以选择不阻塞的部分
	执行以提升运行效率
优点：资源消耗少
      无需进行多核之间的切换
      无需同步互斥操作
      IO并发性好
缺点：无法利用计算机的多核资源

yield ----> python实现协程的基本手段

greenlet
from greenlet import greenlet
def test1():
    print(12)
    gr2.switch()
    print(34)
    gr2.switch()
def test2():
    print(56)
    gr1.switch()
    print(78)
gr1 = greenlet(test1)
gr2 = greenlet(test2)
gr1.switch()
'''12
56
34
78'''
 gevent 
 *将协程事件封装为函数
 *通过gevent将函数生成对应的协程对象
 *通过协程对象完成协程功能的实现
 gevent.spawn(func,argv)
 功能：将事件变为协程事件并且启动
 参数：func 出入一个函数变为协程
       argv 给func位置传参

gevent.joinall([g1,g2,....])
功能：阻塞回收协程
参数：列表 要回收的协程对象

gevent.sleep(n)
功能：模拟IO阻塞的情况

 evenless 
 stackless
-------------------------------------------------------------------------------------------------------------------------
from gevent import monkey
monkey.patch_all()
	功能：可以修改socket的阻塞行为
	*必须在导入socket之前调用


-------------------------------------------------------------------------------------------------------------------------
pip
	pip是python的第三方标准库管理工具
	pip3 install Package

升级：
	pip install --upgrade Package

卸载：
	pip uninstall Package

查看软件包清单：
	pip list

查看软件包：
	pip search Package

查看软件包信息:
	pip show Package

导出软件环境文件：
	pip freeze > requirements.txt

根据文件安装软件环境：
	pip install -r requirements.txt

PDB调试方法：
	通过 pdb模块完成调试功能
功能：断点设置，单步执行，查看函数，查看代码段，追踪变量值
break,b   设置断点
continue,c  继续执行
list,l   查看当前代码段
step,s   进入函数
next,n   执行下一行
pp       打印变量
help     获取帮助

pdb.set_trace()
	功能：设置调试初始点，开始PDB调试
	使用pdb模式运行，从第一行进入pdb调试
	python3 -m pdb debuger.py(此为自己编写的pdb文件)

httpserver：
	第一版：获取http请求，返回了一个固定页面
	第二版：获取http请求
	        解析http请求
	        根据解析结果分析请求内容
	        返回页面或者数据
	第三版：获取http请求，解析http请求，根据解析结果分析请求内容
	*静态网页则返回对应网页
	*请求数据，则比对url，进行返回

	升级：
		http server+框架结构的模型实现功能分离进一步降低耦合性方便功能扩展

前端        前台         客户端         用户端
功能：
	1.和用户交互，获取用户请求
	2.和后端进行通信，整理用户请求给后端
	3.接收后端内容，展现给用户

要求：
	1.良好的用户体验
	2.全面的交互功能
	3.良好的优化
	4.良好的跨平台性
后端   后台    服务端
功能：
	1.接收前端请求
	2.进行逻辑处理和分析运算
	3.和磁盘进行交互(文件，数据库)
	4.数据的整理，向前端返回需要内容
要求：
	1.良好的管理方案
	2.更好的并发性能，处理速度
	3.更好的健壮性
	4.便于维护和扩展
	5.更低的耦合度，合理的技术搭配和框架

框架
	框架即开发模板 ，通过填写修改不同的内容，形成快速开发的项目

httpserver    -------static   			存放静态网页
              -------wsgiPy   			存放逻辑处理程序
              -------HttpServer.py      server服务器
              -------WebFrame.py        模拟后端应用程序
              -------setting.py         作为模块的配置文件
cookie
	__call__()
	功能：使用对象加括号的方式调用执行
	使对象函数一样调用